#!/usr/bin/env python3
# Copyright (C) 2013 Rohan Garg <rohan@kde.org>
# Copyright (C) 2014 Harald Sitter <apachelogger@kubuntu.org>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License or (at your option) version 3 or any later version
# accepted by the membership of KDE e.V. (or its successor approved
# by the membership of KDE e.V.), which shall act as a proxy
# defined in Section 14 of version 3 of the license.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys

import dbus
import dbus.service
import dbus.mainloop.qt
from UbuntuDrivers import detect
from PyQt4.QtCore import QCoreApplication, QTimer, Qt

BUS_NAME = "org.kubuntu.DriverManager"

class DriverManager(dbus.service.Object):

    __timer = None

    def __init__(self, session_bus, parent):
        dbus.service.Object.__init__(self, session_bus,'/DriverManager')
        self.__timer = QTimer(parent)
        self.__timer.timeout.connect(parent.quit, Qt.QueuedConnection)
        # Auto-terminate after 10 seconds in idle.
        self.__timer.setInterval(10*1000)
        self.__timer.start()

    @dbus.service.method(BUS_NAME,
                         in_signature='', out_signature='a{sa{sv}}')
    def devices(self):
        try:
            print("DriverManager_DBus::devices START")
            self.__timer.stop();
            ret = detect.system_device_drivers()
            return ret;
        finally:
            print("DriverManager_DBus::devices END")
            self.__timer.start();

if __name__ == '__main__':
    # When started through dbus we can have a very minimalistic path, make sure
    # that we have the bare essentials available as otherwise tools used
    # internally might not be available and cause errors.
    os.environ['PATH'] = ':'.join(['/bin',
                                   '/sbin',
                                   '/usr/bin',
                                   '/usr/sbin',
                                   os.getenv('PATH')])

    app = QCoreApplication(sys.argv)
    dbus.mainloop.qt.DBusQtMainLoop(set_as_default=True)
    bus = dbus.SessionBus()
    name = dbus.service.BusName(BUS_NAME, bus)
    dbus_manager = DriverManager(session_bus=bus, parent=app)
    sys.exit(app.exec())
